<?php

/**
 * @file
 * Enables yoti login system capability.
 */

use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Drupal\yoti\YotiHelper;
use Yoti\Entity\Profile;
use Drupal\yoti\Models\YotiUserModel;

require_once __DIR__ . '/sdk/boot.php';

/**
 * Display these fields.
 */
function yoti_map_params() {
  return YotiHelper::getUserProfileAttributes();
}

/**
 * Implements hook_theme().
 */
function yoti_theme($existing, $type, $theme, $path) {
  return [
    'yoti_button' => [
      'variables' => [
        'app_id' => NULL,
        'scenario_id' => NULL,
        'button_text' => NULL,
        'is_staging' => NULL,
        'is_linked' => NULL,
        'qr_url' => NULL,
        'service_url' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function yoti_entity_extra_field_info() {
  $map = yoti_map_params();

  $fields = [];
  foreach ($map as $param => $label) {
    $fields['user']['yoti']['display'][$param] = [
      'label' => $label,
      'description' => $label,
      'weight' => 10,
    ];
  }

  $fields['user']['yoti']['display']['yoti_unlink'] = [
    'label' => t('Unlink'),
    'description' => t('Unlink Yoti account'),
    'weight' => 5,
  ];

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function yoti_user_view(array &$build, UserInterface $account) {
  $map = yoti_map_params();
  $promptMessage = 'This will unlink your account from Yoti.';

  $user = \Drupal::currentUser();
  $isAdmin = in_array('administrator', $user->getRoles(), TRUE);
  $dbProfile = YotiUserModel::getYotiUserById($user->id());
  if (!$dbProfile) {
    return;
  }

  $userProfileArr = unserialize($dbProfile['data']);

  foreach ($map as $param => $label) {
    $value = isset($userProfileArr[$param]) ? $userProfileArr[$param] : '';
    if ($param === Profile::ATTR_SELFIE) {
      // Yoti user selfie file name.
      $selfieFileName = NULL;
      if (isset($userProfileArr[YotiHelper::ATTR_SELFIE_FILE_NAME])) {
        $selfieFileName = $userProfileArr[YotiHelper::ATTR_SELFIE_FILE_NAME];
      }
      $selfieFullPath = YotiHelper::uploadDir() . "/{$selfieFileName}";
      if (!empty($selfieFileName) && file_exists($selfieFullPath)) {
        $params = ['field' => 'selfie'];
        if ($isAdmin) {
          $params['user_id'] = $account->uid;
        }
        $selfieUrl = Url::fromRoute('yoti.bin-file', $params)->toString();
        $value = '<img src="' . $selfieUrl . '" width="100" />';
      }
      else {
        $value = '';
      }
    }

    if (!$value) {
      $value = '<i>(empty)</i>';
    }

    $build[$param] = [
      '#type' => 'item',
      '#markup' => '<h4 class="label">' . $label . '</h4> ' . $value,
    ];
  }

  $onClickEvent = "return confirm('{$promptMessage}')";

  // Build Yoti unlink button.
  $unlinkUrl = Url::fromRoute('yoti.unlink');
  $link_options = [
    'attributes' => [
      'id' => [
        'yoti-unlink-button',
      ],
      'onclick' => $onClickEvent,
    ],
  ];
  $unlinkUrl->setOptions($link_options);

  if ($user->id() === $account->id()) {
    $build['yoti_unlink'] = [
      '#type' => 'item',
      '#markup' => \Drupal::l(t('Unlink Yoti account'), $unlinkUrl),
    ];
  }
}

/**
 * Implements hook_user_login().
 */
function yoti_user_login($account) {
  $activityDetails = YotiHelper::getYotiUserFromStore();
  if ($activityDetails && empty($_SESSION['yoti_nolink']) && !isset($_REQUEST['yoti_nolink'])) {
    // Link user account.
    $helper = new YotiHelper(\Drupal::entityTypeManager());
    $helper->createYotiUser($account->id(), $activityDetails);
  }

  // Remove session.
  unset($_SESSION['yoti_nolink']);
  YotiHelper::clearYotiUserStore();
}
