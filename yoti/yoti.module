<?php

/**
 * @file
 * Enables yoti login system capability.
 */

use Yoti\YotiClient;
use Yoti\ActivityDetails;

require_once __DIR__ . '/YotiHelper.php';

/**
 * Display these fields.
 *
 * @return array
 *   An array of Yoti user profile attributes
 */
function yoti_map_params() {
  return YotiHelper::getUserProfileAttributes();
}

/**
 * Implements hook_stream_wrappers().
 */
function yoti_stream_wrappers() {
  return [
    'yoti' => [
      'name' => t('Private yoti files'),
      'class' => YotiStreamWrapper::class,
      'description' => t('Yoti private files.'),
      'type' => STREAM_WRAPPERS_HIDDEN,
    ],
  ];
}

/**
 * Default files (yoti://) stream wrapper class.
 */
class YotiStreamWrapper extends DrupalLocalStreamWrapper {

  /**
   * Implements abstract public function getDirectoryPath()
   */
  public function getDirectoryPath() {
    return 'sites/all/modules/yoti/data';
  }

  /**
   * Overrides getExternalUrl().
   *
   * Return the HTML URI of a private file.
   */
  public function getExternalUrl() {
    return FALSE;
  }

}

/**
 * Implements hook_menu_alter().
 */
function yoti_menu_alter(&$items) {
  return $items;
}

/**
 * Implements hook_block_info().
 */
function yoti_block_info() {
  $blocks = [];
  $blocks['yoti_link'] = [
    'info' => t('Yoti Button'),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function yoti_block_view($delta = '') {
  global $user;

  $block = [];

  // Add sdk url.
  drupal_add_js(YotiHelper::YOTI_SDK_JAVASCRIPT_LIBRARY);
  // Add Yoti css file.
  drupal_add_css(drupal_get_path('module', 'yoti') . '/css/yoti.css', ['group' => CSS_DEFAULT, 'every_page' => TRUE]);

  // No config? no button.
  $config = YotiHelper::getConfig();
  if (!$config) {
    return $block;
  }

  $script = [];

  // If connect url starts with 'https://staging' then we are in staging mode.
  $isStaging = strpos(YotiClient::CONNECT_BASE_URL, 'https://staging') === 0;
  if ($isStaging) {
    // Base url for connect.
    $baseUrl = preg_replace('/^(.+)\/connect$/', '$1', YotiClient::CONNECT_BASE_URL);

    $script[] = sprintf('_ybg.config.qr = "%s/qr/";', $baseUrl);
    $script[] = sprintf('_ybg.config.service = "%s/connect/";', $baseUrl);
  }

  // Add init()
  $script[] = '_ybg.init();';
  $linkButton = '<span
            data-yoti-application-id="' . $config['yoti_app_id'] . '"
            data-yoti-type="inline"
            data-yoti-scenario-id="' . $config['yoti_scenario_id'] . '"
            data-size="small">
            %s
        </span>
        <script>' . implode("\r\n", $script) . '</script>';

  if (!$user->uid) {
    $button = sprintf($linkButton, YotiHelper::YOTI_LINK_BUTTON_DEFAULT_TEXT);
  }
  else {
    $dbProfile = YotiHelper::getYotiUserProfile($user->uid);
    if ($dbProfile) {
      $button = '<strong>Yoti</strong> Linked';
    }
    else {
      $button = sprintf($linkButton, 'Link to Yoti');
    }
  }

  $block['content'] = '<div class="yoti-connect">' . $button . '</div>';

  return $block;
}

/**
 * Implements hook_menu().
 */
function yoti_menu() {

  $items['admin/config/people/yoti'] = [
    'title' => 'Yoti Settings',
    'description' => 'Configure required settings for Yoti integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['yoti_api_keys_settings'],
    'access arguments' => ['administer yoti'],
    'file' => 'yoti.admin.inc',
  ];

  $items['yoti/link'] = [
    'page callback' => 'yoti_link',
    'access callback' => 'no_yoti_login',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  $items['yoti/register'] = [
    'page callback' => 'drupal_get_form',
    'page arguments' => ['yoti_register'],
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  $items['yoti/unlink'] = [
    'href' => 'yoti/unlink',
    'title' => 'Unlink Yoti',
    'page callback' => 'yoti_unlink',
    'access callback' => 'has_yoti_login',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  $items['yoti/bin-file'] = [
    'page callback' => 'yoti_bin_file',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  return $items;
}

/**
 * Check if user has Yoti account.
 */
function has_yoti_login() {
  global $user;

  // Check if user already has an account.
  if ($user) {
    $dbProfile = YotiHelper::getYotiUserProfile($user->uid);
    if ($dbProfile) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Check if user do not have user account.
 */
function no_yoti_login() {
  global $user;

  // Check if user already has an account.
  if (!$user) {
    return TRUE;
  }

  $dbProfile = YotiHelper::getYotiUserProfile($user->uid);
  if ($dbProfile) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_permission().
 */
function yoti_permission() {
  $items = [];
  $items['administer yoti'] = [
    'title' => 'Administer Yoti Module settings',
  ];
  return $items;
}

/**
 * This function will initialize the App.
 *
 * @return true
 *   if initialization was OK. false otherwise.
 */
function yoti_initialize() {
  // Check that PHP version is 5.4 or higher.
  if (version_compare(phpversion(), '5.4.0', '<')) {
    drupal_set_message(t('Yoti not configured properly.'), 'error');
    watchdog(
        'yoti',
        'Yoti PHP SDK requires PHP 5.4 or higher. Your PHP version is @version',
        ['@version' => phpversion()],
        WATCHDOG_ERROR
    );
    return FALSE;
  }

  // Check that the module is configured properly.
  $app_id = variable_get('yoti_app_id', 0);
  $app_secret = variable_get('yoti_sdk_id', 0);

  if (!$app_id || !$app_secret) {
    drupal_set_message(t('Yoti not configured properly.'), 'error');
    watchdog(
        'yoti',
        'Could not initialize Yoti app. Define APP ID and PEM file on module settings.',
        [],
        WATCHDOG_ERROR
    );
    return FALSE;
  }

  // If we have not returned FALSE, SDK is found and module has been configured.
  return TRUE;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function yoti_user_view($account, $view_mode, $langcode) {
  global $user;

  $promptMessage = 'This will unlink your account from Yoti.';

  $map = yoti_map_params();

  $current = $user;
  $isAdmin = in_array('administrator', $current->roles, TRUE);
  $dbProfile = YotiHelper::getYotiUserProfile($account->uid);
  if (!$dbProfile) {
    return;
  }

  $dbProfile = unserialize($dbProfile['data']);

  foreach ($map as $param => $label) {
    $value = isset($dbProfile[$param]) ? $dbProfile[$param] : '';
    if ($param === ActivityDetails::ATTR_SELFIE) {
      // Make it backward compatible by checking the old files directory.
      $oldSelfieFullPath = YotiHelper::uploadDir() . "/{$dbProfile['selfie_filename']}";
      $selfieFullPath = YotiHelper::secureUploadDir() . "/{$dbProfile['selfie_filename']}";
      if (
          $dbProfile['selfie_filename']
          && (file_exists($selfieFullPath) || file_exists($oldSelfieFullPath))
      ) {
        $params = ['field' => 'selfie'];
        if ($isAdmin) {
          $params['user_id'] = $account->uid;
        }
        $selfieUrl = url('/yoti/bin-file', ['query' => $params]);
        $value = '<img src="' . $selfieUrl . '" width="100" />';
      }
      else {
        $value = '';
      }
    }

    // Format date of birth.
    if ($param === ActivityDetails::ATTR_DATE_OF_BIRTH && !empty($value)) {
      $value = date('d-m-Y', strtotime($value));
    }

    if (!$value) {
      $value = '<i>(empty)</i>';
    }

    $account->content['summary'][$param] = [
      '#type' => 'item',
      '#markup' => '<label>' . $label . '</label>' . $value,
    ];
  }

  if ($current->uid === $account->uid) {
    $account->content['summary']['yoti_unlink'] = [
      '#type' => 'item',
      '#markup' => '<div class="yoti-connect">' .
      '<a  class="button" onclick="return confirm(\'' . $promptMessage . '\')" id="yoti-unlink-button" href="' .
      url('/yoti/unlink') . '">' .
      t('Unlink Yoti Account') .
      '</a></div>',
    ];
  }
}
