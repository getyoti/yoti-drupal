<?php

/**
 * @file
 * Enables yoti login system capability.
 */

use Yoti\Entity\Profile;

require_once __DIR__ . '/YotiHelper.php';

/**
 * Implements hook_theme().
 */
function yoti_theme($existing, $type, $theme, $path) {
  return array(
    'yoti_button' => array(
      'variables' => array(
        'button_id' => NULL,
        'is_linked' => FALSE,
      ),
      'path' => $path . '/templates',
      'template' => 'yoti-button',
    ),
  );
}

/**
 * Display these fields.
 *
 * @return array
 *   An array of Yoti user profile attributes
 */
function yoti_map_params() {
  return YotiHelper::getUserProfileAttributes();
}

/**
 * Implements hook_stream_wrappers().
 */
function yoti_stream_wrappers() {
  return [
    'yoti' => [
      'name' => t('Private yoti files'),
      'class' => YotiStreamWrapper::class,
      'description' => t('Yoti private files.'),
      'type' => STREAM_WRAPPERS_HIDDEN,
    ],
  ];
}

/**
 * Default files (yoti://) stream wrapper class.
 */
class YotiStreamWrapper extends DrupalLocalStreamWrapper {

  /**
   * Implements abstract public function getDirectoryPath()
   */
  public function getDirectoryPath() {
    return 'sites/all/modules/yoti/data';
  }

  /**
   * Overrides getExternalUrl().
   *
   * Return the HTML URI of a private file.
   */
  public function getExternalUrl() {
    return FALSE;
  }

}

/**
 * Implements hook_block_info().
 */
function yoti_block_info() {
  $blocks = [];
  $blocks['yoti_link'] = [
    'info' => t('Yoti Button'),
    'cache' => DRUPAL_NO_CACHE,
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function yoti_block_view($delta = '') {
  global $user;

  $block = [];

  // No config? no button.
  $config = YotiHelper::getConfig();
  if (!$config) {
    return $block;
  }

  switch ($delta) {
    case 'yoti_link':
      if (empty($user->uid)) {
        $button_text = YotiHelper::YOTI_LINK_BUTTON_DEFAULT_TEXT;
        $is_linked = FALSE;
      }
      else {
        $button_text = 'Link to Yoti';
        $is_linked = !empty(YotiHelper::getYotiUserProfile($user->uid));
      }

      $button_id = 'yoti-button-' . $delta;

      $block['content'] = array(
        '#theme' => 'yoti_button',
        '#is_linked' => $is_linked,
        '#button_id' => check_plain($button_id),
        '#attached' => array(
          'css' => array(
            array(
              'data' => drupal_get_path('module', 'yoti') . '/css/yoti.css',
              'group' => CSS_DEFAULT,
              'every_page' => TRUE,
            ),
          ),
          'js' => array(
            array(
              'type' => 'setting',
              'data' => array(
                'yoti' => array(
                  'elements' => array(
                    array(
                      'domId' => check_plain($button_id),
                      'clientSdkId' => check_plain($config['yoti_sdk_id']),
                      'scenarioId' => check_plain($config['yoti_scenario_id']),
                      'button' => array(
                        'label' => check_plain($button_text),
                      ),
                    ),
                  ),
                ),
              ),
              'scope' => 'footer',
            ),
            array(
              'type' => 'inline',
              'data' => 'window.Yoti.Share.init(Drupal.settings.yoti);',
              'scope' => 'footer',
            ),
            array(
              'type' => 'external',
              'data' => YotiHelper::YOTI_SDK_JAVASCRIPT_LIBRARY,
              'scope' => 'header',
            ),
          ),
        ),
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_menu().
 */
function yoti_menu() {

  $items['admin/config/people/yoti'] = [
    'title' => 'Yoti Settings',
    'description' => 'Configure required settings for Yoti integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['yoti_api_keys_settings'],
    'access arguments' => ['administer yoti'],
    'file' => 'yoti.admin.inc',
  ];

  $items['yoti/link'] = [
    'page callback' => 'yoti_link',
    'access callback' => 'no_yoti_login',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  $items['yoti/register'] = [
    'page callback' => 'drupal_get_form',
    'page arguments' => ['yoti_register'],
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  $items['yoti/unlink'] = [
    'href' => 'yoti/unlink',
    'title' => 'Unlink Yoti',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['yoti_unlink'],
    'access callback' => 'has_yoti_login',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  $items['yoti/bin-file'] = [
    'page callback' => 'yoti_bin_file',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'yoti.pages.inc',
  ];

  return $items;
}

/**
 * Check if user has Yoti account.
 */
function has_yoti_login() {
  global $user;

  // Check if user already has an account.
  if ($user) {
    $dbProfile = YotiHelper::getYotiUserProfile($user->uid);
    if ($dbProfile) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Check if user do not have user account.
 */
function no_yoti_login() {
  global $user;

  // Check if user already has an account.
  if (!$user) {
    return TRUE;
  }

  $dbProfile = YotiHelper::getYotiUserProfile($user->uid);
  if ($dbProfile) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_permission().
 */
function yoti_permission() {
  $items = [];
  $items['administer yoti'] = [
    'title' => 'Administer Yoti Module settings',
  ];
  return $items;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function yoti_user_view($account, $view_mode, $langcode) {
  global $user;
  $current = $user;

  $map = yoti_map_params();

  $dbProfile = YotiHelper::getYotiUserProfile($account->uid);
  if (!$dbProfile) {
    return;
  }

  $dbProfile = unserialize($dbProfile['data']);

  foreach ($map as $field => $label) {
    if ($field === Profile::ATTR_SELFIE && !empty($dbProfile['selfie_filename'])) {
      $selfieFullPath = YotiHelper::selfieFilePath($dbProfile['selfie_filename']);
      if (is_file($selfieFullPath)) {
        $params = [
          'field' => 'selfie',
          'token' => drupal_get_token('yoti_selfie'),
        ];
        if (user_access('access user profiles')) {
          $params['user_id'] = $account->uid;
        }
        $selfieUrl = url('/yoti/bin-file', ['query' => $params]);
        $field_content = array(
          '#theme' => 'image',
          '#width' => '100',
          '#path' => $selfieUrl,
        );
      }
    }
    else {
      $field_content = array(
        '#markup' => isset($dbProfile[$field]) ? check_plain($dbProfile[$field]) : '<i>(empty)</i>',
      );
    }

    $field_content['#prefix'] = '<label>' . check_plain($label) . '</label>';

    $account->content['summary'][$field] = [
      '#type' => 'item',
      '#id' => 'yoti-profile-' . $field,
      'content' => $field_content,
    ];
  }

  if ($current->uid === $account->uid) {
    $account->content['summary']['yoti_unlink'] = array(
      '#theme' => 'link',
      '#text' => t('Unlink Yoti Account'),
      '#path' => 'yoti/unlink',
      '#prefix' => '<div class="yoti-connect">',
      '#suffix' => '</div>',
      '#options' => array(
        'attributes' => array(
          'class' => array('button'),
          'id' => 'yoti-unlink-button',
        ),
        'html' => FALSE,
      ),
    );
  }
}
